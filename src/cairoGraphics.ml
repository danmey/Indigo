type t = GDraw.pixmap ref
let surface = ref (GDraw.pixmap ~width:200 ~height:200 ())
(* let lift f = f  *)
(* let draw_curved_rectangle cr ~x ~y ~width ~height = *)
(*   Cairo.save cr; *)
(*   Cairo.move_to cr ~x ~y:(y+.height /. 2.); *)
(*   Cairo.curve_to cr ~x1:x ~y1:y ~x2:x ~y2:y ~x3:(x +. width /. 2.) ~y3:y; *)
(*   Cairo.curve_to cr ~x1:(x +. width) ~y1:y ~x2:(x +. width) ~y2:y ~x3:(x +. width) ~y3:(y +. height /. 2.); *)
(*   Cairo.curve_to cr ~x1:(x+. width) ~y1:(y+. height) ~x2:(x +. width) ~y2:(y +. height) ~x3:(x +. width /. 2.) ~y3:(y +. height); *)
(*   Cairo.curve_to cr ~x1:x ~y1:(y +. height) ~x2:x ~y2:(y +. height) ~x3:x ~y3:(y +. height /. 2.); *)
(*   Cairo.restore cr *)
 

(*     let rectangle ~pos:(x,y) ~size:(width,height) =  *)
(*       let x,y,width, height = float x, float y, float width, float height in *)
(*       with_canvas (fun gc -> *)
(*         let cr = Cairo_lablgtk.create (gc)#pixmap in *)
(*         let pat = (Cairo.Pattern.create_linear ~x0:x ~y0:y ~x1:(x+.width) ~y1:(y+.height)) in *)
(*         Cairo.Pattern.add_color_stop_rgb pat ~off:0.0 ~red:0.6 ~green:0.6 ~blue:0.7; *)
(*         Cairo.Pattern.add_color_stop_rgb pat ~off:1.0 ~red:0.6 ~green:0.6 ~blue:1.0; *)
(*         Cairo.set_source cr pat; *)
(*         draw_curved_rectangle cr ~x ~y ~width ~height;        (\* Cairo.rectangle cr ~x ~y ~width ~height; *\) *)
(*         Cairo.fill cr; *)
(*       ) *)

        
(*     let background (r,g,b) = *)
(*       let red,green,blue = float r, float g, float b in *)
(*       with_canvas (fun gc ->  *)
(*         let cr = Cairo_lablgtk.create (gc)#pixmap in *)
(*         Cairo.set_source_rgb ~red ~green ~blue; *)
(*       (\* let col = `RGB (r, g, b) in *\) *)
(*       (\* gc # set_background col *\) *)
(*         () *)
(*       ) *)
(*     let foreground (r,g,b) = *)
(*       with_canvas (fun gc ->  *)
(*       (\* let col = `RGB (r, g, b) in *\) *)
(*       (\* gc # set_foreground col *\) *)
(*         () *)
(*       ) *)
(*   end *)
(*   let bitmap_of_file ~fn = GdkPixbuf.from_file fn *)

(*   let size_of_bitmap bitmap = *)
(*     GdkPixbuf.get_width bitmap, GdkPixbuf.get_height bitmap *)

(*   let load_bitmap fn = *)
(*     let bmp = bitmap_of_file ~fn in  *)
(*     Hashtbl.add resources fn bmp;  *)
(*     bmp *)

(*   let bitmap name =  *)
(*     try  *)
(*       Hashtbl.find resources name  *)
(*     with Not_found -> *)
(*       print_endline "not loaded"; *)
(*       let bmp = load_bitmap name in  *)
(*       bmp *)

